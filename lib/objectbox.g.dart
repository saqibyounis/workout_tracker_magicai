// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/workout_model.dart';
import 'models/workout_set_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2051159532163446488),
      name: 'Workout',
      lastPropertyId: const obx_int.IdUid(5, 1266834510071770086),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7270465789125076060),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 29986876474804752),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1266834510071770086),
            name: 'status',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'sets', srcEntity: 'WorkoutSet', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 63128958744684774),
      name: 'WorkoutSet',
      lastPropertyId: const obx_int.IdUid(5, 5346768777000620119),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8418998436608536776),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7555413500655594292),
            name: 'exercise',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5504012184901365410),
            name: 'weight',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4604693852018706351),
            name: 'repetitions',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5346768777000620119),
            name: 'workoutId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8716320370569269845),
            relationTarget: 'Workout')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 63128958744684774),
      lastIndexId: const obx_int.IdUid(1, 8716320370569269845),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [9142339568576214206, 8175646225003391059],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Workout: obx_int.EntityDefinition<Workout>(
        model: _entities[0],
        toOneRelations: (Workout object) => [],
        toManyRelations: (Workout object) => {
              obx_int.RelInfo<WorkoutSet>.toOneBacklink(5, object.id,
                  (WorkoutSet srcObject) => srcObject.workout): object.sets
            },
        getId: (Workout object) => object.id,
        setId: (Workout object, int id) {
          object.id = id;
        },
        objectToFB: (Workout object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addInt64(4, object.status);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final statusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object =
              Workout(id: idParam, date: dateParam, status: statusParam);
          obx_int.InternalToManyAccess.setRelInfo<Workout>(
              object.sets,
              store,
              obx_int.RelInfo<WorkoutSet>.toOneBacklink(
                  5, object.id, (WorkoutSet srcObject) => srcObject.workout));
          return object;
        }),
    WorkoutSet: obx_int.EntityDefinition<WorkoutSet>(
        model: _entities[1],
        toOneRelations: (WorkoutSet object) => [object.workout],
        toManyRelations: (WorkoutSet object) => {},
        getId: (WorkoutSet object) => object.id,
        setId: (WorkoutSet object, int id) {
          object.id = id;
        },
        objectToFB: (WorkoutSet object, fb.Builder fbb) {
          final exerciseOffset = fbb.writeString(object.exercise);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, exerciseOffset);
          fbb.addFloat64(2, object.weight);
          fbb.addInt64(3, object.repetitions);
          fbb.addInt64(4, object.workout.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final exerciseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final weightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final repetitionsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = WorkoutSet(
              id: idParam,
              exercise: exerciseParam,
              weight: weightParam,
              repetitions: repetitionsParam);
          object.workout.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.workout.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Workout] entity fields to define ObjectBox queries.
class Workout_ {
  /// See [Workout.id].
  static final id =
      obx.QueryIntegerProperty<Workout>(_entities[0].properties[0]);

  /// See [Workout.date].
  static final date =
      obx.QueryDateProperty<Workout>(_entities[0].properties[1]);

  /// See [Workout.status].
  static final status =
      obx.QueryIntegerProperty<Workout>(_entities[0].properties[2]);

  /// see [Workout.sets]
  static final sets =
      obx.QueryBacklinkToMany<WorkoutSet, Workout>(WorkoutSet_.workout);
}

/// [WorkoutSet] entity fields to define ObjectBox queries.
class WorkoutSet_ {
  /// See [WorkoutSet.id].
  static final id =
      obx.QueryIntegerProperty<WorkoutSet>(_entities[1].properties[0]);

  /// See [WorkoutSet.exercise].
  static final exercise =
      obx.QueryStringProperty<WorkoutSet>(_entities[1].properties[1]);

  /// See [WorkoutSet.weight].
  static final weight =
      obx.QueryDoubleProperty<WorkoutSet>(_entities[1].properties[2]);

  /// See [WorkoutSet.repetitions].
  static final repetitions =
      obx.QueryIntegerProperty<WorkoutSet>(_entities[1].properties[3]);

  /// See [WorkoutSet.workout].
  static final workout =
      obx.QueryRelationToOne<WorkoutSet, Workout>(_entities[1].properties[4]);
}
