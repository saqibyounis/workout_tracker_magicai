// Mocks generated by Mockito 5.4.4 from annotations
// in workout_tracker_magicai/test/repository/workout_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:objectbox/src/native/box.dart' as _i2;
import 'package:objectbox/src/native/query/query.dart' as _i5;
import 'package:objectbox/src/store.dart' as _i7;
import 'package:objectbox/src/transaction.dart' as _i10;
import 'package:workout_tracker_magicai/models/workout_model.dart' as _i4;
import 'package:workout_tracker_magicai/models/workout_set_model.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<T1> extends _i1.SmartFake implements _i2.Box<T1> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkout_2 extends _i1.SmartFake implements _i4.Workout {
  _FakeWorkout_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_3<T> extends _i1.SmartFake
    implements _i5.QueryBuilder<T> {
  _FakeQueryBuilder_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutSet_4 extends _i1.SmartFake implements _i6.WorkoutSet {
  _FakeWorkoutSet_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore extends _i1.Mock implements _i7.Store {
  MockStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get directoryPath => (super.noSuchMethod(
        Invocation.getter(#directoryPath),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#directoryPath),
        ),
      ) as String);

  @override
  _i9.ByteData get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _i9.ByteData(0),
      ) as _i9.ByteData);

  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Box<T> box<T>() => (super.noSuchMethod(
        Invocation.method(
          #box,
          [],
        ),
        returnValue: _FakeBox_0<T>(
          this,
          Invocation.method(
            #box,
            [],
          ),
        ),
      ) as _i2.Box<T>);

  @override
  R runInTransaction<R>(
    _i10.TxMode? mode,
    R Function()? fn,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #runInTransaction,
          [
            mode,
            fn,
          ],
        ),
        returnValue: _i8.dummyValue<R>(
          this,
          Invocation.method(
            #runInTransaction,
            [
              mode,
              fn,
            ],
          ),
        ),
      ) as R);

  @override
  _i3.Future<R> runInTransactionAsync<R, P>(
    _i10.TxMode? mode,
    _i7.TxAsyncCallback<R, P>? callback,
    P? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #runInTransactionAsync,
          [
            mode,
            callback,
            param,
          ],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #runInTransactionAsync,
                  [
                    mode,
                    callback,
                    param,
                  ],
                ),
              ),
              (R v) => _i3.Future<R>.value(v),
            ) ??
            _FakeFuture_1<R>(
              this,
              Invocation.method(
                #runInTransactionAsync,
                [
                  mode,
                  callback,
                  param,
                ],
              ),
            ),
      ) as _i3.Future<R>);

  @override
  _i3.Future<R> runAsync<P, R>(
    _i7.RunAsyncCallback<P, R>? callback,
    P? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #runAsync,
          [
            callback,
            param,
          ],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #runAsync,
                  [
                    callback,
                    param,
                  ],
                ),
              ),
              (R v) => _i3.Future<R>.value(v),
            ) ??
            _FakeFuture_1<R>(
              this,
              Invocation.method(
                #runAsync,
                [
                  callback,
                  param,
                ],
              ),
            ),
      ) as _i3.Future<R>);

  @override
  bool awaitQueueCompletion() => (super.noSuchMethod(
        Invocation.method(
          #awaitQueueCompletion,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool awaitQueueSubmitted() => (super.noSuchMethod(
        Invocation.method(
          #awaitQueueSubmitted,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutBox extends _i1.Mock implements _i2.Box<_i4.Workout> {
  MockWorkoutBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int put(
    _i4.Workout? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> putAsync(
    _i4.Workout? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<_i4.Workout> putAndGetAsync(
    _i4.Workout? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<_i4.Workout>.value(_FakeWorkout_2(
          this,
          Invocation.method(
            #putAndGetAsync,
            [object],
            {#mode: mode},
          ),
        )),
      ) as _i3.Future<_i4.Workout>);

  @override
  _i3.Future<int> putQueuedAwaitResult(
    _i4.Workout? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueuedAwaitResult,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putQueued(
    _i4.Workout? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueued,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
      ) as int);

  @override
  List<int> putMany(
    List<_i4.Workout>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [objects],
          {#mode: mode},
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i3.Future<List<int>> putManyAsync(
    List<_i4.Workout>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<_i4.Workout>> putAndGetManyAsync(
    List<_i4.Workout>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i3.Future<List<_i4.Workout>>.value(<_i4.Workout>[]),
      ) as _i3.Future<List<_i4.Workout>>);

  @override
  _i4.Workout? get(int? id) => (super.noSuchMethod(Invocation.method(
        #get,
        [id],
      )) as _i4.Workout?);

  @override
  _i3.Future<_i4.Workout?> getAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAsync,
          [id],
        ),
        returnValue: _i3.Future<_i4.Workout?>.value(),
      ) as _i3.Future<_i4.Workout?>);

  @override
  List<_i4.Workout?> getMany(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMany,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: <_i4.Workout?>[],
      ) as List<_i4.Workout?>);

  @override
  _i3.Future<List<_i4.Workout?>> getManyAsync(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyAsync,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: _i3.Future<List<_i4.Workout?>>.value(<_i4.Workout?>[]),
      ) as _i3.Future<List<_i4.Workout?>>);

  @override
  List<_i4.Workout> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i4.Workout>[],
      ) as List<_i4.Workout>);

  @override
  _i3.Future<List<_i4.Workout>> getAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #getAllAsync,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Workout>>.value(<_i4.Workout>[]),
      ) as _i3.Future<List<_i4.Workout>>);

  @override
  _i5.QueryBuilder<_i4.Workout> query([_i5.Condition<_i4.Workout>? qc]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [qc],
        ),
        returnValue: _FakeQueryBuilder_3<_i4.Workout>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
      ) as _i5.QueryBuilder<_i4.Workout>);

  @override
  int count({int? limit = 0}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#limit: limit},
        ),
        returnValue: 0,
      ) as int);

  @override
  bool isEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isEmpty,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(int? id) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool containsMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #containsMany,
          [ids],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> removeAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  int removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> removeManyAsync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeManyAsync,
          [ids],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> removeAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAllAsync,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutSetBox extends _i1.Mock implements _i2.Box<_i6.WorkoutSet> {
  MockWorkoutSetBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int put(
    _i6.WorkoutSet? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> putAsync(
    _i6.WorkoutSet? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<_i6.WorkoutSet> putAndGetAsync(
    _i6.WorkoutSet? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<_i6.WorkoutSet>.value(_FakeWorkoutSet_4(
          this,
          Invocation.method(
            #putAndGetAsync,
            [object],
            {#mode: mode},
          ),
        )),
      ) as _i3.Future<_i6.WorkoutSet>);

  @override
  _i3.Future<int> putQueuedAwaitResult(
    _i6.WorkoutSet? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueuedAwaitResult,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putQueued(
    _i6.WorkoutSet? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueued,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
      ) as int);

  @override
  List<int> putMany(
    List<_i6.WorkoutSet>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [objects],
          {#mode: mode},
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i3.Future<List<int>> putManyAsync(
    List<_i6.WorkoutSet>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<_i6.WorkoutSet>> putAndGetManyAsync(
    List<_i6.WorkoutSet>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i3.Future<List<_i6.WorkoutSet>>.value(<_i6.WorkoutSet>[]),
      ) as _i3.Future<List<_i6.WorkoutSet>>);

  @override
  _i6.WorkoutSet? get(int? id) => (super.noSuchMethod(Invocation.method(
        #get,
        [id],
      )) as _i6.WorkoutSet?);

  @override
  _i3.Future<_i6.WorkoutSet?> getAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAsync,
          [id],
        ),
        returnValue: _i3.Future<_i6.WorkoutSet?>.value(),
      ) as _i3.Future<_i6.WorkoutSet?>);

  @override
  List<_i6.WorkoutSet?> getMany(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMany,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: <_i6.WorkoutSet?>[],
      ) as List<_i6.WorkoutSet?>);

  @override
  _i3.Future<List<_i6.WorkoutSet?>> getManyAsync(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyAsync,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue:
            _i3.Future<List<_i6.WorkoutSet?>>.value(<_i6.WorkoutSet?>[]),
      ) as _i3.Future<List<_i6.WorkoutSet?>>);

  @override
  List<_i6.WorkoutSet> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i6.WorkoutSet>[],
      ) as List<_i6.WorkoutSet>);

  @override
  _i3.Future<List<_i6.WorkoutSet>> getAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #getAllAsync,
          [],
        ),
        returnValue: _i3.Future<List<_i6.WorkoutSet>>.value(<_i6.WorkoutSet>[]),
      ) as _i3.Future<List<_i6.WorkoutSet>>);

  @override
  _i5.QueryBuilder<_i6.WorkoutSet> query([_i5.Condition<_i6.WorkoutSet>? qc]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [qc],
        ),
        returnValue: _FakeQueryBuilder_3<_i6.WorkoutSet>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
      ) as _i5.QueryBuilder<_i6.WorkoutSet>);

  @override
  int count({int? limit = 0}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#limit: limit},
        ),
        returnValue: 0,
      ) as int);

  @override
  bool isEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isEmpty,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool contains(int? id) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool containsMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #containsMany,
          [ids],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> removeAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  int removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> removeManyAsync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeManyAsync,
          [ids],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i3.Future<int> removeAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAllAsync,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
